#include<stdio.h>
#include<stdlib.h>
#include<string.h>
 
typedef struct {
  void* data;
  int top;
  int totalElements;
  int memberSize;
}Stack;

Stack* createStack(int memberSize, int totalElements);
void pop();
void empty();
void display();
void stack_count();
void create();
void menu();
 
int count=0;

void menu()
{
 int no,ch,e;
 
    printf("\n 1-Push");
    printf("\n 2-Pop");
    printf("\n 3-Empty");
    printf("\n 4-Exit");
    printf("\n 5-Dipslay");
    printf("\n 6-Stack Count");
 
    create();
    while(1)
    {
     printf("\nEnter choice=");
     scanf("%d",&ch);
 
     switch(ch)
     {
      case 1:printf("Enter data=");
             scanf("%d",&no);
	     push(no);
	     break;

      case 2:pop();
             break;

      case 3:empty();
             break;

      case 4:exit(0);
   
      case 5:display();
             break;
   
      case 6:stack_count();
             break;
     }
  }
}

int main()
{
 menu();
 return 0;    
}

void stack_count()
{
 printf("\nNo.of elements in stack=%d",count);
}
 

Stack* createStack(int memberSize,int totalElements)
{
  Stack* s=malloc(sizeof(Stack));
  s->top=-1;
  s->memberSize=memberSize;
  s->totalElements=totalElements;
  s->data=malloc(totalElements*memberSize);
  return s;
}

int stackPush(Stack* s,void* element)
{
  if(s->top==s->totalElements-1)
  {
   return 1;
  }
  s->top++;
  void* target=(char*)s->data+(s->top*s->memberSize);
  memcpy(target,element,s->memberSize);
  return 0;
}

int expandStack(Stack* s)
{
  s->data=realloc(s->data,s->totalElements*2);
  s->totalElements*= 2;
  return 0;
}


void pop()
{
    top1=top;
 
    if(top1==NULL)
    {
        printf("\nError");
        return;
    }
    else
        top1=top1->ptr;
    printf("\nPopped value=%d",top->info);
    free(top);
    top=top1;
    count--;
}

void empty()
{
    if(top==NULL)
    {
     printf("\n Stack is empty");
    }
    
    else
    {
     printf("\nStack is not empty.It has %d elements",count);
    }
}
